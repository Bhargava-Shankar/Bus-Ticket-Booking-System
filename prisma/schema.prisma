// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  userId   String     @id @default(auto()) @map("_id") @db.ObjectId
  email    String     @unique
  username String
  password String
  Bookings Bookings[]
}

enum BusConditioningType {
  AC
  NON_AC
}

enum BusSeatingType {
  SLEEPER
  SEMI_SLEEPER
}

enum SeatNumbers {
  LL1
  LL2
  LL3
  LL4
  LL5
  LR1
  LR2
  LR3
  LR4
  LR5
  UL1
  UL2
  UL3
  UL4
  UL5
  UR1
  UR2
  UR3
  UR4
  UR5
}

model Bus {
  busId            String              @id @default(auto()) @map("_id") @db.ObjectId
  busNumber        String
  travelsName     String
  source           String
  destination      String
  arrivalTime      DateTime
  departureTime    DateTime
  conditioningType BusConditioningType @default(NON_AC)
  seatingType      BusSeatingType      @default(SEMI_SLEEPER)
  seatsAvailable   Int
  totalSeats       Int
  Bus_Seat         Bus_Seat[]
}

model Bus_Seat {
  seatId            String    @id @default(auto()) @map("_id") @db.ObjectId
  seatNo            SeatNumbers
  bus               Bus       @relation(fields: [busId], references: [busId])
  busId             String    @db.ObjectId
  isBooked          Boolean   @default(false)
  Bookings          Bookings? @relation(fields: [bookingsBookingId], references: [bookingId])
  bookingsBookingId String?   @db.ObjectId

  @@unique([busId, seatNo])
}

model Bookings {
  bookingId     String     @id @default(auto()) @map("_id") @db.ObjectId
  bookingNumber String     @unique
  bookedSeats   Bus_Seat[]
  user          User       @relation(fields: [userId], references: [userId])
  userId        String     @db.ObjectId
}
