openapi: 3.0.0
info:
  title: Bus Ticket Booking System 
  version: 1.0.0
servers:
  - url: http://localhost:3000/
  - name: user
tags:
  - name: auth
  - name: bus
  - name: booking
paths:
  /user/register:
    post:
      summary: Register a new user 
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref : "#/components/schemas/User"
      responses:
        '200':
          description: User is successfully registered
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    format: string
                    example: "success"
                  data:
                    type: object
                  message:
                    type: string
                    format: string
                    example: "Registered Succesfull"
        '400':
          description: When user email is already registerd with another account
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    format: string
                    example: "error"
                  data:
                    type: object
                  message:
                    type: string
                    format: string
                    example: "Email Already Exists"
  /user/login:
    post:
      summary: Login Existing user into the site
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: string
                  example: "bhargava@gmail.com"
                password:
                  type: string
                  format: password
                  example: "baggy"
      responses:
        '200':
          description: User is successfully registered
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    format: string
                  data:
                    type: object
                    format: object
                    properties:
                      token:
                        type: string
                        format: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2Njc4OTdkNzE3NmJlOGFmY2U2M2U2MDMiLCJpYXQiOjE3MTkxOTg0ODIsImV4cCI6MTcxOTI4NDg4Mn0.Y6ji2nawTXNsXj2hjnRaR4dDxJYy_-uaOM0_2UNTdRs"
                  message:
                    type: string
                    format: string
                    example: "Login Succesfull"
        '401':
          description: "Invalid password"
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "error"
                  data: 
                    type: object
                  message:
                    type: string
                    format: string
                    example: "Invalid Password"
        '4xx':
          description: "Email Doesn't exist"
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "error"
                  data: 
                    type: object
                  message:
                    type: string
                    format: string
                    example: "Invalid Password"
  /user/logout:
    post:
      summary: "Logout User and end user Session"
      description: Set Bearer token in Authroization header 
      security:
        - BearerAuth: []
      tags:
        - auth
      responses:
        '200':
          description: User is successfully registered
        '401':
          description: User Already Logged Out
  /user/getAllBus:
    get:
      summary: Get all the available buses given source, destination and date
      tags:
        - bus
      parameters:
        - in: query 
          name: source
          schema:
            type: string
          example: Chennai
        - in: query
          name: destination
          schema:
            type: string
          example: Madurai
        - in: query
          name: departureDate
          schema:
            type: string
            format: date
          example: "2024-06-21"
      responses:
        '200':
          description: Get all bus details successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusDetails"
  /user/search:
    get:
      summary: Search buses given source, destination, date, and travel name
      tags:
        - bus
      parameters:
        - in: query 
          name: source
          schema:
            type: string
          example: Chennai
        - in: query
          name: destination
          schema:
            type: string
          example: Madurai
        - in: query
          name: departureDate
          schema:
            type: string
            format: date
          example: "2024-06-21"
        - in: query
          name: travelsName
          schema:
            type: string
          example: Economy Travels
      responses:
        '200':
          description: Get all bus details successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusDetails"
  /user/book:
    post:
      summary: Book bus tickets
      tags:
        - booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookRequest"
      responses:
        '200':
          description: Booking successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
        '409':
          description: Error booking your seat
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
          example: John Doe
        email:
          type: string
          example: Johndoe@gmail.com
        password:
          type: string
      required:
        - email
        - password
    BusDetails:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          type: array
          items:
            type: object
            properties:
              busId:
                type: string
                example: "66750c4af4e458f5dd0e3db6"
              busNumber:
                type: string
                example: "BN1005"
              travelsName:
                type: string
                example: "Economy Travels"
              source:
                type: string
                example: "Chennai"
              destination:
                type: string
                example: "Madurai"
              arrivalTime:
                type: string
                format: date-time
                example: "2024-06-21T23:30:00.000Z"
              departureTime:
                type: string
                format: date-time
                example: "2024-06-21T18:00:00.000Z"
              conditioningType:
                type: string
                example: "AC"
              seatingType:
                type: string
                example: "SEMI_SLEEPER"
              seatsAvailable:
                type: integer
                example: 20
              totalSeats:
                type: integer
                example: 20
        message:
          type: object
          example: {}
    BookRequest:
      type: object
      properties:
        busId:
          type: string
          example: "66750c49f4e458f5dd0e3db0"
        seatNumbers:
          type: array
          items:
            type: string
          example:
            - "LL4"
            - "RL1"
    BookResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          type: array
          items:
            type: object
            properties:
              bookingId:
                type: string
                example: "66799f02c3d1536c744380bc"
              userId:
                type: string
                example: "667878f43e743b62ee3f51e4"
              busId:
                type: string
                example: "66750c49f4e458f5dd0e3db0"
              bookedSeats:
                type: array
                items:
                  type: string
                example:
                  - "LL123"
                  - "RL123"
              totalPrice:
                type: number
                example: 1600
              createdAt:
                type: string
                format: date-time
                example: "2024-06-24T16:29:54.306Z"
              busNumber:
                type: string
                example: "BN1002"
              travelsName:
                type: string
                example: "Happy Journeys"
              source:
                type: string
                example: "Trichy"
              destination:
                type: string
                example: "Madurai"
              arrivalTime:
                type: string
                format: date-time
                example: "2024-06-21T16:45:00.000Z"
              departureTime:
                type: string
                format: date-time
                example: "2024-06-21T10:15:00.000Z"
              conditioningType:
                type: string
                example: "NON_AC"
              seatingType:
                type: string
                example: "SEMI_SLEEPER"
              seatsAvailable:
                type: integer
                example: 16
              totalSeats:
                type: integer
                example: 20
        message:
          type: object
          properties:
            msg:
              type: string
              example: "Booking Successful"
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "error"
        message:
          type: string
          example: "Error booking your seat"
  

security:
  - BearerAuth: []
