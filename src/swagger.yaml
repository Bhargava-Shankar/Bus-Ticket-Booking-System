openapi: 3.0.0
swagger: 2.0.0
info:
  title: Bus Ticket Booking System 
  version: 1.0.0
servers:
  - url: http://localhost:3000/
  - name: user
tags:
  - name: auth
  - name: bus
paths:
  /user/register:
    post:
      summary: Register a new user 
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref : "#/components/schemas/User"
      responses:
        '200':
          description: User is successfully registered
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    format: string
                    example: "success"
                  data:
                    type: object
                  message:
                    type: string
                    format: string
                    example: "Registered Succesfull"
        '400':
          description: When user email is already registerd with another account
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    format: string
                    example: "error"
                  data:
                    type: object
                  message:
                    type: string
                    format: string
                    example: "Email Already Exists"
  /user/login:
    post:
      summary: Login Existing user into the site
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: string
                  example: "bhargava@gmail.com"
                password:
                  type: string
                  format: password
                  example: "baggy"
      responses:
        '200':
          description: User is successfully registered
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    format: string
                  data:
                    type: object
                    format: object
                    properties:
                      token:
                        type: string
                        format: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2Njc4OTdkNzE3NmJlOGFmY2U2M2U2MDMiLCJpYXQiOjE3MTkxOTg0ODIsImV4cCI6MTcxOTI4NDg4Mn0.Y6ji2nawTXNsXj2hjnRaR4dDxJYy_-uaOM0_2UNTdRs"
                  message:
                    type: string
                    format: string
                    example: "Login Succesfull"
        '401':
          description: "Invalid password"
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "error"
                  data: 
                    type: object
                  message:
                    type: string
                    format: string
                    example: "Invalid Password"
        '4xx':
          description: "Email Doesn't exist"
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "error"
                  data: 
                    type: object
                  message:
                    type: string
                    format: string
                    example: "Invalid Password"
  /user/logout:
    post:
      summary: "Logout User and end user Session"
      description: Set Bearer token in Authroization header 
      security:
        - BearerAuth: []
      tags:
        - auth
      responses:
        '200':
          description: User is successfully registered
        '401':
          description: User Already Logged Out



components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
          example: John Doe
        email:
          type: string
          example: Johndoe@gmail.com
        password:
          type: string
      required:
        - email
        - password
  

security:
  - BearerAuth: []
